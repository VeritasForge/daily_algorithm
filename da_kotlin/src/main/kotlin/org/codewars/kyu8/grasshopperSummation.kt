
/*
 * Kata URL: https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/kotlin
 * Title: Grasshopper - Summation
 *
 * Problem Description:
 * Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.
 *
 * For example:
 * summation(2) -> 3 (1 + 2)
 * summation(8) -> 36 (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8)
 */

package org.codewars.kyu8

//fun summation(n: Int): Int = (1..n).sum()


/*
  등차수열 합 공식 `n * (n + 1) / 2`의 원리

  1. 문제 정의

  1부터 양의 정수 n까지의 합(Summation)을 구하는 문제는 수학적으로 다음과 같이 표현할 수 있습니다.

  S = 1 + 2 + 3 + ... + (n-1) + n

  또는 시그마(Σ) 기호를 사용하여 표현하면 다음과 같습니다.

  S = Σ k (k=1 부터 n 까지)

  가장 직관적인 해법은 모든 항을 순차적으로 더하는 것이지만, 이는 n의 크기에 비례하는 연산(시간 복잡도 O(n))을 필요로
  합니다. 등차수열 합 공식을 사용하면 n의 값에 관계없이 상수 시간(O(1))에 결과를 도출할 수 있습니다.

  2. 공식 유도 과정

  이 공식은 수열을 재배열하여 계산을 단순화하는 아이디어에 기반합니다.

  1단계: 수열을 두 번 나열하기
  합 S를 구하려는 수열을 한 번은 오름차순으로, 다른 한 번은 내림차순으로 나열합니다.

   1 S = 1   + 2   + ... + (n-1) + n
   2 S = n   + (n-1) + ... + 2   + 1

  2단계: 두 수열을 변끼리 더하기
  위 두 식을 세로로 각 항끼리 더합니다. 좌변은 S + S 이므로 2S가 됩니다.

   1 2S = (1 + n) + (2 + n-1) + ... + (n-1 + 2) + (n + 1)

  3단계: 각 항의 합 관찰하기
  세로로 더해진 각 항의 값을 살펴보면 놀라운 패턴을 발견할 수 있습니다.

   - 첫 번째 항: 1 + n
   - 두 번째 항: 2 + (n-1) = n + 1
   - 세 번째 항: 3 + (n-2) = n + 1
   - ...
   - 마지막 항: n + 1

  모든 항의 합이 n + 1로 일정합니다.

  4단계: `n + 1`의 총 개수 파악하기
  n + 1 이라는 값을 가진 항은 총 몇 개일까요? 이는 원본 수열의 항의 개수와 동일하므로 정확히 n개입니다.

  따라서 2S는 n + 1을 n번 더한 것과 같습니다.

  2S = n * (n + 1)

  5단계: `S`에 대해 정리하기
  우리가 구하고자 하는 값은 S이므로, 위 식의 양변을 2로 나누어 정리합니다.

  S = n * (n + 1) / 2

  이 과정을 통해 1부터 n까지의 합은 n * (n + 1) / 2 와 같음이 증명됩니다. 이 방법은 n이 짝수이든 홀수이든 관계없이
  동일하게 성립합니다.

  3. 요약

  등차수열의 합 공식은 수열을 역순으로 배열하여 원본과 더하는 방식을 통해 유도됩니다. 이 과정에서 합이 일정한 새로운
  항들의 수열(n+1이 n개)이 만들어지며, 이를 통해 복잡한 덧셈 연산을 단 한 번의 곱셈과 나눗셈으로 대체하여 계산 효율을
  극대화합니다.
 */
fun summation(n: Int): Int = n * (n + 1) / 2
